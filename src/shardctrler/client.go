package shardctrler

//
// Shardctrler clerk.
//

import (
	"crypto/rand"
	"math/big"

	"6.824/labrpc"
	"6.824/raft"
)

type Clerk struct {
	servers []*labrpc.ClientEnd
	// Your data here.
	leader    int
	clientID  int64         // client uuid, generated by nrand
	requestID *raft.Counter // serial id of requests
}

func nrand() int64 {
	max := big.NewInt(int64(1) << 62)
	bigx, _ := rand.Int(rand.Reader, max)
	x := bigx.Int64()
	return x
}

func MakeClerk(servers []*labrpc.ClientEnd) *Clerk {
	ck := new(Clerk)
	ck.servers = servers
	// Your code here.
	// initialization
	ck.clientID = nrand()
	ck.requestID = &raft.Counter{}
	return ck
}

// merge RPCs to one
func (ck *Clerk) sendCommandRequest(args *CommandArgs) *CommandReply {
	// send request persistently
	for {
		reply := CommandReply{}
		ok := ck.servers[ck.leader].Call("ShardCtrler.CommandRequest", args, &reply)
		if !ok || reply.WrongLeader || reply.Err != OK {
			// try next
			ck.leader = (ck.leader + 1) % len(ck.servers)
			// time.Sleep(100 * time.Millisecond)
			continue
		}
		// command handled successfully
		return &reply
	}
}

func (ck *Clerk) Query(num int) Config {
	args := &CommandArgs{
		Type:      Query,
		ClientID:  ck.clientID,
		RequestID: ck.requestID.Increment(1),
		Num:       num,
	}
	return ck.sendCommandRequest(args).Config
}

func (ck *Clerk) Join(servers map[int][]string) {
	args := &CommandArgs{
		Type:      Join,
		ClientID:  ck.clientID,
		RequestID: ck.requestID.Increment(1),
		Servers:   servers,
	}
	ck.sendCommandRequest(args)
}

func (ck *Clerk) Leave(gids []int) {
	args := &CommandArgs{
		Type:      Leave,
		ClientID:  ck.clientID,
		RequestID: ck.requestID.Increment(1),
		GIDs:      gids,
	}
	ck.sendCommandRequest(args)
}

func (ck *Clerk) Move(shard int, gid int) {
	args := &CommandArgs{
		Type:      Join,
		ClientID:  ck.clientID,
		RequestID: ck.requestID.Increment(1),
		Shard:     shard,
		GID:       gid,
	}
	ck.sendCommandRequest(args)
}
